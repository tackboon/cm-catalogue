// Package customer provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package customer

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for CashBookRecordPostType.
const (
	Credit CashBookRecordPostType = "credit"
	Debit  CashBookRecordPostType = "debit"
)

// Defines values for CustomerPostRelationship.
const (
	InCooperation CustomerPostRelationship = "in_cooperation"
	Suspended     CustomerPostRelationship = "suspended"
)

// CashBookRecord defines model for CashBookRecord.
type CashBookRecord struct {
	Amount      float32            `json:"amount"`
	CreatedAt   time.Time          `json:"created_at"`
	CustomerId  int                `json:"customer_id"`
	Date        openapi_types.Date `json:"date"`
	Description string             `json:"description"`
	Id          int                `json:"id"`
	Type        string             `json:"type"`
	UpdatedAt   time.Time          `json:"updated_at"`
}

// CashBookRecordPost defines model for CashBookRecordPost.
type CashBookRecordPost struct {
	Amount      float32                `json:"amount"`
	Date        time.Time              `json:"date"`
	Description string                 `json:"description"`
	Type        CashBookRecordPostType `json:"type"`
}

// CashBookRecordPostType defines model for CashBookRecordPost.Type.
type CashBookRecordPostType string

// CashBookRecords defines model for CashBookRecords.
type CashBookRecords struct {
	Data []CashBookRecord `json:"data"`
}

// Customer defines model for Customer.
type Customer struct {
	Address             string    `json:"address"`
	City                string    `json:"city"`
	Code                string    `json:"code"`
	Contact             string    `json:"contact"`
	CreatedAt           time.Time `json:"created_at"`
	Id                  int       `json:"id"`
	Name                string    `json:"name"`
	Postcode            string    `json:"postcode"`
	Relationship        string    `json:"relationship"`
	State               string    `json:"state"`
	TotalUnbilledAmount float32   `json:"total_unbilled_amount"`
	UpdatedAt           time.Time `json:"updated_at"`
}

// CustomerPost defines model for CustomerPost.
type CustomerPost struct {
	Address      string                   `json:"address"`
	City         string                   `json:"city"`
	Code         string                   `json:"code"`
	Contact      string                   `json:"contact"`
	Name         string                   `json:"name"`
	Postcode     string                   `json:"postcode"`
	Relationship CustomerPostRelationship `json:"relationship"`
	State        string                   `json:"state"`
}

// CustomerPostRelationship defines model for CustomerPost.Relationship.
type CustomerPostRelationship string

// Customers defines model for Customers.
type Customers struct {
	Data       []Customer `json:"data"`
	Pagination Pagination `json:"pagination"`
}

// ModelError defines model for ModelError.
type ModelError struct {
	Message string `json:"message"`
	Slug    string `json:"slug"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	// Total number of items returned.
	Count int `json:"count"`

	// Current page.
	Page int `json:"page"`

	// Total number of items available.
	TotalCount int `json:"total_count"`
}

// Unexpected defines model for Unexpected.
type Unexpected = ModelError

// GetAllCustomersDataParams defines parameters for GetAllCustomersData.
type GetAllCustomersDataParams struct {
	Page               *int                                         `form:"page,omitempty" json:"page,omitempty"`
	Limit              *int                                         `form:"limit,omitempty" json:"limit,omitempty"`
	Filter             *string                                      `form:"filter,omitempty" json:"filter,omitempty"`
	RelationshipFilter *GetAllCustomersDataParamsRelationshipFilter `form:"relationshipFilter,omitempty" json:"relationshipFilter,omitempty"`
}

// GetAllCustomersDataParamsRelationshipFilter defines parameters for GetAllCustomersData.
type GetAllCustomersDataParamsRelationshipFilter string

// CreateCustomerDataJSONBody defines parameters for CreateCustomerData.
type CreateCustomerDataJSONBody = CustomerPost

// UpdateCustomerDataJSONBody defines parameters for UpdateCustomerData.
type UpdateCustomerDataJSONBody = CustomerPost

// GetCashBookRecordsParams defines parameters for GetCashBookRecords.
type GetCashBookRecordsParams struct {
	StartAt time.Time `form:"start_at" json:"start_at"`
	EndAt   time.Time `form:"end_at" json:"end_at"`
}

// CreateCashBookRecordJSONBody defines parameters for CreateCashBookRecord.
type CreateCashBookRecordJSONBody = CashBookRecordPost

// CreateCustomerDataJSONRequestBody defines body for CreateCustomerData for application/json ContentType.
type CreateCustomerDataJSONRequestBody = CreateCustomerDataJSONBody

// UpdateCustomerDataJSONRequestBody defines body for UpdateCustomerData for application/json ContentType.
type UpdateCustomerDataJSONRequestBody = UpdateCustomerDataJSONBody

// CreateCashBookRecordJSONRequestBody defines body for CreateCashBookRecord for application/json ContentType.
type CreateCashBookRecordJSONRequestBody = CreateCashBookRecordJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllCustomersData request
	GetAllCustomersData(ctx context.Context, params *GetAllCustomersDataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomerData request with any body
	CreateCustomerDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCustomerData(ctx context.Context, body CreateCustomerDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCutomerData request
	DeleteCutomerData(ctx context.Context, customerId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomerDataByID request
	GetCustomerDataByID(ctx context.Context, customerId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomerData request with any body
	UpdateCustomerDataWithBody(ctx context.Context, customerId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCustomerData(ctx context.Context, customerId int, body UpdateCustomerDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCashBookRecords request
	GetCashBookRecords(ctx context.Context, customerId int, params *GetCashBookRecordsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCashBookRecord request with any body
	CreateCashBookRecordWithBody(ctx context.Context, customerId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCashBookRecord(ctx context.Context, customerId int, body CreateCashBookRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCashBookRecord request
	DeleteCashBookRecord(ctx context.Context, customerId int, cashBookRecordId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllCustomersData(ctx context.Context, params *GetAllCustomersDataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllCustomersDataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomerDataWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomerDataRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomerData(ctx context.Context, body CreateCustomerDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomerDataRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCutomerData(ctx context.Context, customerId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCutomerDataRequest(c.Server, customerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerDataByID(ctx context.Context, customerId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerDataByIDRequest(c.Server, customerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomerDataWithBody(ctx context.Context, customerId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomerDataRequestWithBody(c.Server, customerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomerData(ctx context.Context, customerId int, body UpdateCustomerDataJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomerDataRequest(c.Server, customerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCashBookRecords(ctx context.Context, customerId int, params *GetCashBookRecordsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCashBookRecordsRequest(c.Server, customerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCashBookRecordWithBody(ctx context.Context, customerId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCashBookRecordRequestWithBody(c.Server, customerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCashBookRecord(ctx context.Context, customerId int, body CreateCashBookRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCashBookRecordRequest(c.Server, customerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCashBookRecord(ctx context.Context, customerId int, cashBookRecordId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCashBookRecordRequest(c.Server, customerId, cashBookRecordId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllCustomersDataRequest generates requests for GetAllCustomersData
func NewGetAllCustomersDataRequest(server string, params *GetAllCustomersDataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RelationshipFilter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relationshipFilter", runtime.ParamLocationQuery, *params.RelationshipFilter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomerDataRequest calls the generic CreateCustomerData builder with application/json body
func NewCreateCustomerDataRequest(server string, body CreateCustomerDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCustomerDataRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCustomerDataRequestWithBody generates requests for CreateCustomerData with any type of body
func NewCreateCustomerDataRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCutomerDataRequest generates requests for DeleteCutomerData
func NewDeleteCutomerDataRequest(server string, customerId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomerDataByIDRequest generates requests for GetCustomerDataByID
func NewGetCustomerDataByIDRequest(server string, customerId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCustomerDataRequest calls the generic UpdateCustomerData builder with application/json body
func NewUpdateCustomerDataRequest(server string, customerId int, body UpdateCustomerDataJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCustomerDataRequestWithBody(server, customerId, "application/json", bodyReader)
}

// NewUpdateCustomerDataRequestWithBody generates requests for UpdateCustomerData with any type of body
func NewUpdateCustomerDataRequestWithBody(server string, customerId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCashBookRecordsRequest generates requests for GetCashBookRecords
func NewGetCashBookRecordsRequest(server string, customerId int, params *GetCashBookRecordsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/cash-book", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start_at", runtime.ParamLocationQuery, params.StartAt); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end_at", runtime.ParamLocationQuery, params.EndAt); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCashBookRecordRequest calls the generic CreateCashBookRecord builder with application/json body
func NewCreateCashBookRecordRequest(server string, customerId int, body CreateCashBookRecordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCashBookRecordRequestWithBody(server, customerId, "application/json", bodyReader)
}

// NewCreateCashBookRecordRequestWithBody generates requests for CreateCashBookRecord with any type of body
func NewCreateCashBookRecordRequestWithBody(server string, customerId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/cash-book", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCashBookRecordRequest generates requests for DeleteCashBookRecord
func NewDeleteCashBookRecordRequest(server string, customerId int, cashBookRecordId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "cash_book_record_id", runtime.ParamLocationPath, cashBookRecordId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/cash-book/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllCustomersData request
	GetAllCustomersDataWithResponse(ctx context.Context, params *GetAllCustomersDataParams, reqEditors ...RequestEditorFn) (*GetAllCustomersDataResponse, error)

	// CreateCustomerData request with any body
	CreateCustomerDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomerDataResponse, error)

	CreateCustomerDataWithResponse(ctx context.Context, body CreateCustomerDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomerDataResponse, error)

	// DeleteCutomerData request
	DeleteCutomerDataWithResponse(ctx context.Context, customerId int, reqEditors ...RequestEditorFn) (*DeleteCutomerDataResponse, error)

	// GetCustomerDataByID request
	GetCustomerDataByIDWithResponse(ctx context.Context, customerId int, reqEditors ...RequestEditorFn) (*GetCustomerDataByIDResponse, error)

	// UpdateCustomerData request with any body
	UpdateCustomerDataWithBodyWithResponse(ctx context.Context, customerId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomerDataResponse, error)

	UpdateCustomerDataWithResponse(ctx context.Context, customerId int, body UpdateCustomerDataJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomerDataResponse, error)

	// GetCashBookRecords request
	GetCashBookRecordsWithResponse(ctx context.Context, customerId int, params *GetCashBookRecordsParams, reqEditors ...RequestEditorFn) (*GetCashBookRecordsResponse, error)

	// CreateCashBookRecord request with any body
	CreateCashBookRecordWithBodyWithResponse(ctx context.Context, customerId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCashBookRecordResponse, error)

	CreateCashBookRecordWithResponse(ctx context.Context, customerId int, body CreateCashBookRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCashBookRecordResponse, error)

	// DeleteCashBookRecord request
	DeleteCashBookRecordWithResponse(ctx context.Context, customerId int, cashBookRecordId int, reqEditors ...RequestEditorFn) (*DeleteCashBookRecordResponse, error)
}

type GetAllCustomersDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Customers
	JSONDefault  *ModelError
}

// Status returns HTTPResponse.Status
func (r GetAllCustomersDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllCustomersDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomerDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Customer
	JSONDefault  *ModelError
}

// Status returns HTTPResponse.Status
func (r CreateCustomerDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomerDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCutomerDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ModelError
}

// Status returns HTTPResponse.Status
func (r DeleteCutomerDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCutomerDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerDataByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Customer
	JSONDefault  *ModelError
}

// Status returns HTTPResponse.Status
func (r GetCustomerDataByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerDataByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomerDataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Customer
	JSONDefault  *ModelError
}

// Status returns HTTPResponse.Status
func (r UpdateCustomerDataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomerDataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCashBookRecordsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CashBookRecords
	JSONDefault  *ModelError
}

// Status returns HTTPResponse.Status
func (r GetCashBookRecordsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCashBookRecordsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCashBookRecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ModelError
}

// Status returns HTTPResponse.Status
func (r CreateCashBookRecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCashBookRecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCashBookRecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ModelError
}

// Status returns HTTPResponse.Status
func (r DeleteCashBookRecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCashBookRecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllCustomersDataWithResponse request returning *GetAllCustomersDataResponse
func (c *ClientWithResponses) GetAllCustomersDataWithResponse(ctx context.Context, params *GetAllCustomersDataParams, reqEditors ...RequestEditorFn) (*GetAllCustomersDataResponse, error) {
	rsp, err := c.GetAllCustomersData(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllCustomersDataResponse(rsp)
}

// CreateCustomerDataWithBodyWithResponse request with arbitrary body returning *CreateCustomerDataResponse
func (c *ClientWithResponses) CreateCustomerDataWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomerDataResponse, error) {
	rsp, err := c.CreateCustomerDataWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomerDataResponse(rsp)
}

func (c *ClientWithResponses) CreateCustomerDataWithResponse(ctx context.Context, body CreateCustomerDataJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomerDataResponse, error) {
	rsp, err := c.CreateCustomerData(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomerDataResponse(rsp)
}

// DeleteCutomerDataWithResponse request returning *DeleteCutomerDataResponse
func (c *ClientWithResponses) DeleteCutomerDataWithResponse(ctx context.Context, customerId int, reqEditors ...RequestEditorFn) (*DeleteCutomerDataResponse, error) {
	rsp, err := c.DeleteCutomerData(ctx, customerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCutomerDataResponse(rsp)
}

// GetCustomerDataByIDWithResponse request returning *GetCustomerDataByIDResponse
func (c *ClientWithResponses) GetCustomerDataByIDWithResponse(ctx context.Context, customerId int, reqEditors ...RequestEditorFn) (*GetCustomerDataByIDResponse, error) {
	rsp, err := c.GetCustomerDataByID(ctx, customerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerDataByIDResponse(rsp)
}

// UpdateCustomerDataWithBodyWithResponse request with arbitrary body returning *UpdateCustomerDataResponse
func (c *ClientWithResponses) UpdateCustomerDataWithBodyWithResponse(ctx context.Context, customerId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomerDataResponse, error) {
	rsp, err := c.UpdateCustomerDataWithBody(ctx, customerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomerDataResponse(rsp)
}

func (c *ClientWithResponses) UpdateCustomerDataWithResponse(ctx context.Context, customerId int, body UpdateCustomerDataJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomerDataResponse, error) {
	rsp, err := c.UpdateCustomerData(ctx, customerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomerDataResponse(rsp)
}

// GetCashBookRecordsWithResponse request returning *GetCashBookRecordsResponse
func (c *ClientWithResponses) GetCashBookRecordsWithResponse(ctx context.Context, customerId int, params *GetCashBookRecordsParams, reqEditors ...RequestEditorFn) (*GetCashBookRecordsResponse, error) {
	rsp, err := c.GetCashBookRecords(ctx, customerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCashBookRecordsResponse(rsp)
}

// CreateCashBookRecordWithBodyWithResponse request with arbitrary body returning *CreateCashBookRecordResponse
func (c *ClientWithResponses) CreateCashBookRecordWithBodyWithResponse(ctx context.Context, customerId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCashBookRecordResponse, error) {
	rsp, err := c.CreateCashBookRecordWithBody(ctx, customerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCashBookRecordResponse(rsp)
}

func (c *ClientWithResponses) CreateCashBookRecordWithResponse(ctx context.Context, customerId int, body CreateCashBookRecordJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCashBookRecordResponse, error) {
	rsp, err := c.CreateCashBookRecord(ctx, customerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCashBookRecordResponse(rsp)
}

// DeleteCashBookRecordWithResponse request returning *DeleteCashBookRecordResponse
func (c *ClientWithResponses) DeleteCashBookRecordWithResponse(ctx context.Context, customerId int, cashBookRecordId int, reqEditors ...RequestEditorFn) (*DeleteCashBookRecordResponse, error) {
	rsp, err := c.DeleteCashBookRecord(ctx, customerId, cashBookRecordId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCashBookRecordResponse(rsp)
}

// ParseGetAllCustomersDataResponse parses an HTTP response from a GetAllCustomersDataWithResponse call
func ParseGetAllCustomersDataResponse(rsp *http.Response) (*GetAllCustomersDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllCustomersDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ModelError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateCustomerDataResponse parses an HTTP response from a CreateCustomerDataWithResponse call
func ParseCreateCustomerDataResponse(rsp *http.Response) (*CreateCustomerDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomerDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ModelError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCutomerDataResponse parses an HTTP response from a DeleteCutomerDataWithResponse call
func ParseDeleteCutomerDataResponse(rsp *http.Response) (*DeleteCutomerDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCutomerDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ModelError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCustomerDataByIDResponse parses an HTTP response from a GetCustomerDataByIDWithResponse call
func ParseGetCustomerDataByIDResponse(rsp *http.Response) (*GetCustomerDataByIDResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerDataByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ModelError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUpdateCustomerDataResponse parses an HTTP response from a UpdateCustomerDataWithResponse call
func ParseUpdateCustomerDataResponse(rsp *http.Response) (*UpdateCustomerDataResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomerDataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Customer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ModelError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCashBookRecordsResponse parses an HTTP response from a GetCashBookRecordsWithResponse call
func ParseGetCashBookRecordsResponse(rsp *http.Response) (*GetCashBookRecordsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCashBookRecordsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CashBookRecords
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ModelError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateCashBookRecordResponse parses an HTTP response from a CreateCashBookRecordWithResponse call
func ParseCreateCashBookRecordResponse(rsp *http.Response) (*CreateCashBookRecordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCashBookRecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ModelError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCashBookRecordResponse parses an HTTP response from a DeleteCashBookRecordWithResponse call
func ParseDeleteCashBookRecordResponse(rsp *http.Response) (*DeleteCashBookRecordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCashBookRecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ModelError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
