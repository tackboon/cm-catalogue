// Package port provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package port

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/go-chi/chi/v5"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for CashBookRecordPostType.
const (
	Credit CashBookRecordPostType = "credit"
	Debit  CashBookRecordPostType = "debit"
)

// Defines values for CustomerPostRelationship.
const (
	InCooperation CustomerPostRelationship = "in_cooperation"
	Suspended     CustomerPostRelationship = "suspended"
)

// CashBookRecord defines model for CashBookRecord.
type CashBookRecord struct {
	Amount      float32            `json:"amount"`
	CreatedAt   time.Time          `json:"created_at"`
	CustomerId  int                `json:"customer_id"`
	Date        openapi_types.Date `json:"date"`
	Description string             `json:"description"`
	Id          int                `json:"id"`
	Type        string             `json:"type"`
	UpdatedAt   time.Time          `json:"updated_at"`
}

// CashBookRecordPost defines model for CashBookRecordPost.
type CashBookRecordPost struct {
	Amount      float32                `json:"amount"`
	Date        time.Time              `json:"date"`
	Description string                 `json:"description"`
	Type        CashBookRecordPostType `json:"type"`
}

// CashBookRecordPostType defines model for CashBookRecordPost.Type.
type CashBookRecordPostType string

// CashBookRecords defines model for CashBookRecords.
type CashBookRecords struct {
	Data []CashBookRecord `json:"data"`
}

// Customer defines model for Customer.
type Customer struct {
	Address             string    `json:"address"`
	City                string    `json:"city"`
	Code                string    `json:"code"`
	Contact             string    `json:"contact"`
	CreatedAt           time.Time `json:"created_at"`
	Id                  int       `json:"id"`
	Name                string    `json:"name"`
	Postcode            string    `json:"postcode"`
	Relationship        string    `json:"relationship"`
	State               string    `json:"state"`
	TotalUnbilledAmount float32   `json:"total_unbilled_amount"`
	UpdatedAt           time.Time `json:"updated_at"`
}

// CustomerPost defines model for CustomerPost.
type CustomerPost struct {
	Address      string                   `json:"address"`
	City         string                   `json:"city"`
	Code         string                   `json:"code"`
	Contact      string                   `json:"contact"`
	Name         string                   `json:"name"`
	Postcode     string                   `json:"postcode"`
	Relationship CustomerPostRelationship `json:"relationship"`
	State        string                   `json:"state"`
}

// CustomerPostRelationship defines model for CustomerPost.Relationship.
type CustomerPostRelationship string

// Customers defines model for Customers.
type Customers struct {
	Data       []Customer `json:"data"`
	Pagination Pagination `json:"pagination"`
}

// ModelError defines model for ModelError.
type ModelError struct {
	Message string `json:"message"`
	Slug    string `json:"slug"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	// Total number of items returned.
	Count int `json:"count"`

	// Current page.
	Page int `json:"page"`

	// Total number of items available.
	TotalCount int `json:"total_count"`
}

// Unexpected defines model for Unexpected.
type Unexpected = ModelError

// GetAllCustomersDataParams defines parameters for GetAllCustomersData.
type GetAllCustomersDataParams struct {
	Page               *int                                         `form:"page,omitempty" json:"page,omitempty"`
	Limit              *int                                         `form:"limit,omitempty" json:"limit,omitempty"`
	Filter             *string                                      `form:"filter,omitempty" json:"filter,omitempty"`
	RelationshipFilter *GetAllCustomersDataParamsRelationshipFilter `form:"relationshipFilter,omitempty" json:"relationshipFilter,omitempty"`
}

// GetAllCustomersDataParamsRelationshipFilter defines parameters for GetAllCustomersData.
type GetAllCustomersDataParamsRelationshipFilter string

// CreateCustomerDataJSONBody defines parameters for CreateCustomerData.
type CreateCustomerDataJSONBody = CustomerPost

// UpdateCustomerDataJSONBody defines parameters for UpdateCustomerData.
type UpdateCustomerDataJSONBody = CustomerPost

// GetCashBookRecordsParams defines parameters for GetCashBookRecords.
type GetCashBookRecordsParams struct {
	StartAt time.Time `form:"start_at" json:"start_at"`
	EndAt   time.Time `form:"end_at" json:"end_at"`
}

// CreateCashBookRecordJSONBody defines parameters for CreateCashBookRecord.
type CreateCashBookRecordJSONBody = CashBookRecordPost

// CreateCustomerDataJSONRequestBody defines body for CreateCustomerData for application/json ContentType.
type CreateCustomerDataJSONRequestBody = CreateCustomerDataJSONBody

// UpdateCustomerDataJSONRequestBody defines body for UpdateCustomerData for application/json ContentType.
type UpdateCustomerDataJSONRequestBody = UpdateCustomerDataJSONBody

// CreateCashBookRecordJSONRequestBody defines body for CreateCashBookRecord for application/json ContentType.
type CreateCashBookRecordJSONRequestBody = CreateCashBookRecordJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all customers
	// (GET /)
	GetAllCustomersData(w http.ResponseWriter, r *http.Request, params GetAllCustomersDataParams)
	// Create new customer
	// (POST /)
	CreateCustomerData(w http.ResponseWriter, r *http.Request)
	// Delete customer data by ID
	// (DELETE /{customer_id})
	DeleteCutomerData(w http.ResponseWriter, r *http.Request, customerId int)
	// Get a customer data.
	// (GET /{customer_id})
	GetCustomerDataByID(w http.ResponseWriter, r *http.Request, customerId int)
	// Update customer data
	// (PUT /{customer_id})
	UpdateCustomerData(w http.ResponseWriter, r *http.Request, customerId int)
	// List out cash book records for selected customer
	// (GET /{customer_id}/cash-book)
	GetCashBookRecords(w http.ResponseWriter, r *http.Request, customerId int, params GetCashBookRecordsParams)
	// Create new cash book record for selected customer
	// (POST /{customer_id}/cash-book)
	CreateCashBookRecord(w http.ResponseWriter, r *http.Request, customerId int)
	// Delete a cash book record from the customer
	// (DELETE /{customer_id}/cash-book/{cash_book_record_id})
	DeleteCashBookRecord(w http.ResponseWriter, r *http.Request, customerId int, cashBookRecordId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetAllCustomersData operation middleware
func (siw *ServerInterfaceWrapper) GetAllCustomersData(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllCustomersDataParams

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := r.URL.Query().Get("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------
	if paramValue := r.URL.Query().Get("filter"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	// ------------- Optional query parameter "relationshipFilter" -------------
	if paramValue := r.URL.Query().Get("relationshipFilter"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "relationshipFilter", r.URL.Query(), &params.RelationshipFilter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relationshipFilter", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllCustomersData(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateCustomerData operation middleware
func (siw *ServerInterfaceWrapper) CreateCustomerData(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCustomerData(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteCutomerData operation middleware
func (siw *ServerInterfaceWrapper) DeleteCutomerData(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customer_id" -------------
	var customerId int

	err = runtime.BindStyledParameter("simple", false, "customer_id", chi.URLParam(r, "customer_id"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customer_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCutomerData(w, r, customerId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCustomerDataByID operation middleware
func (siw *ServerInterfaceWrapper) GetCustomerDataByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customer_id" -------------
	var customerId int

	err = runtime.BindStyledParameter("simple", false, "customer_id", chi.URLParam(r, "customer_id"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customer_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCustomerDataByID(w, r, customerId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateCustomerData operation middleware
func (siw *ServerInterfaceWrapper) UpdateCustomerData(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customer_id" -------------
	var customerId int

	err = runtime.BindStyledParameter("simple", false, "customer_id", chi.URLParam(r, "customer_id"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customer_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCustomerData(w, r, customerId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetCashBookRecords operation middleware
func (siw *ServerInterfaceWrapper) GetCashBookRecords(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customer_id" -------------
	var customerId int

	err = runtime.BindStyledParameter("simple", false, "customer_id", chi.URLParam(r, "customer_id"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customer_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCashBookRecordsParams

	// ------------- Required query parameter "start_at" -------------
	if paramValue := r.URL.Query().Get("start_at"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "start_at"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "start_at", r.URL.Query(), &params.StartAt)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "start_at", Err: err})
		return
	}

	// ------------- Required query parameter "end_at" -------------
	if paramValue := r.URL.Query().Get("end_at"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "end_at"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "end_at", r.URL.Query(), &params.EndAt)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "end_at", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCashBookRecords(w, r, customerId, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CreateCashBookRecord operation middleware
func (siw *ServerInterfaceWrapper) CreateCashBookRecord(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customer_id" -------------
	var customerId int

	err = runtime.BindStyledParameter("simple", false, "customer_id", chi.URLParam(r, "customer_id"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customer_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCashBookRecord(w, r, customerId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteCashBookRecord operation middleware
func (siw *ServerInterfaceWrapper) DeleteCashBookRecord(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "customer_id" -------------
	var customerId int

	err = runtime.BindStyledParameter("simple", false, "customer_id", chi.URLParam(r, "customer_id"), &customerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "customer_id", Err: err})
		return
	}

	// ------------- Path parameter "cash_book_record_id" -------------
	var cashBookRecordId int

	err = runtime.BindStyledParameter("simple", false, "cash_book_record_id", chi.URLParam(r, "cash_book_record_id"), &cashBookRecordId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cash_book_record_id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCashBookRecord(w, r, customerId, cashBookRecordId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/", wrapper.GetAllCustomersData)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/", wrapper.CreateCustomerData)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/{customer_id}", wrapper.DeleteCutomerData)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{customer_id}", wrapper.GetCustomerDataByID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/{customer_id}", wrapper.UpdateCustomerData)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/{customer_id}/cash-book", wrapper.GetCashBookRecords)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/{customer_id}/cash-book", wrapper.CreateCashBookRecord)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/{customer_id}/cash-book/{cash_book_record_id}", wrapper.DeleteCashBookRecord)
	})

	return r
}
